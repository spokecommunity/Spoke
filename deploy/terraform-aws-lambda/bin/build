#!/bin/bash
# 
# Build Spoke and deploy it using Terraform.

##### Constants

TERRAFORM_PATH=$PWD
DEPLOY_PATH="$TERRAFORM_PATH/build"

DATE=$(date +"%Y%m%d%H%M")
TMP_ZIP_PATH=/tmp/spoke-server-$DATE.zip

SPOKE_PATH=
SPOKE_DOMAIN=
S3_BUCKET=
AWS_REGION="us-east-1"
AUTO_DEPLOY=0
AUTO_YES=0
LOG_LOCATION="$TERRAFORM_PATH/logs"

##### Functions

build_spoke()
{
    # Clear out deploy folder
    rm -r $DEPLOY_PATH
    mkdir -p $DEPLOY_PATH/client

    # Package the application (builds server and client before zipping)
    echo -n "Packing application..."
    OUTPUT=$(
        cd "$SPOKE_PATH"
        export NODE_ENV=production
        export OUTPUT_DIR="./build"
        export PUBLIC_DIR="./build/client"
        export ASSETS_DIR="./build/client/assets"
        export STATIC_BASE_URL="https://s3.${AWS_REGION}.amazonaws.com/${S3_BUCKET}/static/"
        export BASE_URL="https://${SPOKE_DOMAIN}"
        export ASSETS_MAP_FILE="assets.json"
        claudia pack --output $TMP_ZIP_PATH 2>&1
    )
    if [ $? -eq 0 ]; then echo " done"; else
        echo " error"
        mkdir -p "$LOG_LOCATION"
        CLAUDIA_LOG_LOCATION="$LOG_LOCATION/claudia-log.txt"
        echo "$OUTPUT" > "$CLAUDIA_LOG_LOCATION"
        echo "For details see: $CLAUDIA_LOG_LOCATION"
        exit 1
    fi
}   # end of build_spoke

gather_bundle()
{
    # Locate client bundle in .zip
    BUNDLE_PATH=$(unzip -l $TMP_ZIP_PATH | grep "build/client/assets/bundle" | awk '{print $4}')
    BUNDLE_FILENAME=$(basename -- "$BUNDLE_PATH")
    BUNDLE_HASH=`echo "$BUNDLE_FILENAME" | cut -d '.' -f 2`

    # Rename server.zip with hash for uniqueness
    SERVER_ZIP_PATH=$DEPLOY_PATH/server.$BUNDLE_HASH.zip
    cp $TMP_ZIP_PATH $SERVER_ZIP_PATH

    # Extract client bundle
    echo -n "Extracting client bundle for separate upload..."
    unzip -j $SERVER_ZIP_PATH $BUNDLE_PATH -d $DEPLOY_PATH/client/ > /dev/null
    CLIENT_BUNDLE_LOCATION="$DEPLOY_PATH/client/$BUNDLE_FILENAME"
    echo " done"
}   # end of gather_bundle

terraform_command()
{
    local builder="terraform apply"
    builder="$builder \\ \n"
    builder="$builder    -var 'server_bundle_location=$SERVER_ZIP_PATH'"
    builder="$builder \\ \n"
    builder="$builder    -var 'client_bundle_location=$CLIENT_BUNDLE_LOCATION'"
    builder="$builder \\ \n"
    builder="$builder    -var 'client_bundle_hash=$BUNDLE_HASH'"
    if [ $AUTO_YES = "1" ]; then
        builder="$builder \\ \n"
        builder="$builder    -auto-approve"
    fi
    echo -e "$builder"
}   # end of terraform_command

success_message()
{
    echo "
Bundling complete.

Your bundle files are:

    $SERVER_ZIP_PATH
    $DEPLOY_PATH/client/$BUNDLE_FILENAME

You may apply the changes with:

$(terraform_command)
"
}   # end of success_message

usage()
{
    cat <<EOF
Build the Spoke project and deploy to AWS.

Requires:
    Claudia     npm install -g claudia
    Terraform   https://www.terraform.io/downloads.html

Usage: $0 [options]

    -p | --path [path]      (required) The path to the Spoke project folder.
    -d | --domain [domain]  (required) The instance domain name. Ex: spoke.example.com
    -b | --bucket [name]    (optional) The name of the AWS S3 bucket that Terraform will create.
                                       This is needed during webpack compilation.
                                       Defaults to the domain name.
    -r | --region [region]  (optional) The AWS region to deploy in. Defaults to 'us-east-1'.
    -l | --logs [path]      (optional) Path where logs should be stored. Defaults to $PWD/logs.
    -a | --auto-deploy      (optional) If set, script will call 'terraform apply' with appropriate
                                       options rather than just printing the command.
    -y | --yes              (optional) If set, script will assume "yes" to any input prompts.
    -h | --help             Display this help text.
EOF
}   # end of usage

##### Main

# Process positional paramters
# Source: http://linuxcommand.org/lc3_wss0120.php
while [ "$1" != "" ]; do
    case $1 in
        -h | --help )           usage
                                exit 0
                                ;;
        -p | --path )           shift
                                SPOKE_PATH=$1
                                ;;
        -d | --domain )         shift
                                SPOKE_DOMAIN=$1
                                ;;
        -b | --bucket )         shift
                                S3_BUCKET=$1
                                ;;
        -r | --region )         shift
                                AWS_REGION=$1
                                ;;
        -l | --logs )           shift
                                LOG_LOCATION=$1
                                ;;
        -a | --auto-deploy )    AUTO_DEPLOY=1
                                ;;
        -y | --yes )            AUTO_YES=1
                                ;;
        * )                     echo "Unrecognized option $1. See usage:"
                                echo ""
                                usage
                                exit 1
    esac
    shift
done

# Ensure required variables are present
if [[ -z ${SPOKE_PATH} ]]; then echo "You must provide the Spoke path!" && exit 1 ; fi
if [[ -z ${SPOKE_DOMAIN} ]]; then echo "You must provide the Spoke domain!" && exit 1 ; fi

# Fall back on default values
if [[ -z ${S3_BUCKET} ]]; then S3_BUCKET="$SPOKE_DOMAIN"; fi

# Build Spoke
build_spoke
gather_bundle

if [[ $AUTO_DEPLOY = "1" ]]; then
   eval $(terraform_command)
else
    success_message
fi
